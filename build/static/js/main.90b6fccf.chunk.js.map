{"version":3,"sources":["Shared/app-constants.js","Shared/app-context.js","Utils/services.js","Components/Map/map.js","App.js","serviceWorker.js","index.js"],"names":["MAPBOX_API_URL","BootcampAppContext","createContext","undefined","BootcampFinalProjectContextProvider","props","useState","startupDir","setStartupDir","getStartupDirs","a","axios","get","then","jsonResponse","data","catch","e","alert","dir","Provider","value","world","addStartupInfoToCountry","feature","layer","name","properties","startupsFound","startups","filter","stp","hq","length","startupContent","i","bindPopup","filterStartupsLATAM","children","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","BootcampFinalProjectMap","state","lat","lng","zoom","setState","MapStateHandler","useContext","console","log","useEffect","position","Map","center","class","TileLayer","attribution","url","GeoJSON","onEachFeature","App","dataFetched","setDataFetched","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kwrfACMA,EAAc,oHADD,8F,iBCINC,EAAqBC,6BAAcC,GA0CjCC,EAxC6B,SAACC,GAAW,IAAD,EACfC,oBAAS,iBAAM,MADA,mBAC5CC,EAD4C,KAChCC,EADgC,KAqB7CC,EAAc,uCAAG,4BAAAC,EAAA,sECvBhBC,IAAMC,IAAN,UFDS,+EECT,aAAoCC,MAAK,SAAAC,GAC5C,QAAOA,GAAeA,EAAaC,QACpCC,OAAM,SAAAC,GAET,OADIC,MAAM,0CACH,KDmBgB,QACbC,EADa,SAGfX,EAAcW,GAHC,2CAAH,qDAOpB,OACI,kBAAClB,EAAmBmB,SAApB,CAA6BC,MAAO,CAChCC,QACAC,wBAdwB,SAACC,EAASC,IAdd,SAACD,EAASC,GAAW,IACrCC,EAASF,EAAQG,WAAjBD,KACFE,EAAgBrB,EAAWsB,SAASC,QAAO,SAAAC,GAAG,OAAIA,EAAIC,KAAON,KACnE,GAAGE,EAAcK,OAAS,EAAG,CAEzB,IADA,IAAIC,EAAiB,GACbC,EAAI,EAAGA,EAAIP,EAAcK,OAAQE,IAAK,CAE1CD,GADmB,cAAUN,EAAcO,GAAGT,KAA3B,SAGvBQ,EAAiB,OAAOA,EAAe,QACvCT,EAAMW,UAAUF,IAKpBG,CAAoBb,EAASC,IAczBlB,aACAE,mBAECJ,EAAMiC,kBEjCZC,IAAEC,KAAKC,QAAQC,UAAUC,YAEhCJ,IAAEC,KAAKC,QAAQG,aAAa,CACxBC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,MAGvB,IAqCeG,EA5BiB,WAAO,IAC3BC,EAVY,WAAO,IAAD,EACA5C,oBAAS,iBAAO,CACtC6C,IAAK,KACLC,KAAM,QACNC,KAAM,MAJgB,mBAM1B,MAAO,CAAEH,MANiB,KAMVI,SANU,MAURC,GAAVL,MAD0B,EAEqBM,qBAAWvD,GAA1DM,EAF0B,EAE1BA,WAAYe,EAFc,EAEdA,MAAOC,EAFO,EAEPA,wBAC3BkC,QAAQC,IAAIR,GACZS,qBAAU,WACNF,QAAQC,IAAI,gBAAgBpC,KAC9B,CAACA,IAEHqC,qBAAU,WACNF,QAAQC,IAAI,cAAenD,KAC7B,CAACA,IAEH,IAAMqD,EAAW,CAACV,EAAMC,IAAKD,EAAME,KACnC,OACI,kBAACS,EAAA,EAAD,CAAKC,OAAQF,EAAUP,KAAMH,EAAMG,KAAMU,MAAM,eAC3C,kBAACC,EAAA,EAAD,CACIC,YAAY,2NACZC,IAAKlE,IAGLO,EAAWsB,SACX,kBAACsC,EAAA,EAAD,CAASpD,KAAMO,EAAO8C,cAAe7C,IAA6B,KCzBnE8C,MAhBf,WAAgB,IACJ5D,EAAmB+C,qBAAWvD,GAA9BQ,eADG,EAE2BH,oBAAS,kBAAM,KAF1C,mBAEJgE,EAFI,KAESC,EAFT,KASb,OANEZ,qBAAU,WACFW,IACA7D,IACA8D,GAAe,MAErB,CAACD,EAAa7D,EAAgB8D,IAEhC,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,KACG,kBAAC,EAAD,QAGPC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdvE,OAAM,SAAAwE,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.90b6fccf.chunk.js","sourcesContent":["const acessToken = \"pk.eyJ1IjoiZ3VndW5uZXIiLCJhIjoiY2tjbWxoamwzMDJmajJ4cWtsNHN6NjJkNiJ9.gTU76mp1kS4Rn7Kh5h67EQ\";\nconst MAPBOX_API_URL = `https://api.mapbox.com/styles/v1/gugunner/ckdnjzx3i2ca61jmvld4f035x/tiles/256/{z}/{x}/{y}@2x?access_token=${acessToken}`;\n// const API_DEV_URL = \"http://localhost:5000/bootcamp-final-project/api/\";\nconst API_DEV_URL = \"https://bootcamp-final-project-app.herokuapp.com/bootcamp-final-project/api/\"\nexport {\n    acessToken,\n    MAPBOX_API_URL,\n    API_DEV_URL\n};","import React, {createContext, useState} from \"react\";\nimport world from \"../Data/custom_world.geo.json\";\nimport { getAllStartups } from \"../Utils/services\";\n\nexport const BootcampAppContext = createContext(undefined);\n\nconst BootcampFinalProjectContextProvider = (props) => {\n    const [startupDir, setStartupDir] = useState(() => []);\n\n    const filterStartupsLATAM = (feature, layer) => {\n        const { name } = feature.properties;\n        const startupsFound = startupDir.startups.filter(stp => stp.hq === name );\n        if(startupsFound.length > 0) {\n            let startupContent = \"\";\n            for(let i = 0; i < startupsFound.length; i++) {\n                const startupString = `<li>${startupsFound[i].name}</li>`;\n                startupContent += startupString;\n            }\n            startupContent = \"<ul>\"+startupContent+\"</ul>\"\n            layer.bindPopup(startupContent);\n        }\n    };\n\n    const addStartupInfoToCountry = (feature, layer) => {\n        filterStartupsLATAM(feature, layer);\n    };\n\n    const getStartupDirs = async() => {\n        const dir = await getAllStartups();\n        if(dir) {\n            setStartupDir(dir);\n        }\n    };\n\n    return (\n        <BootcampAppContext.Provider value={{\n            world,\n            addStartupInfoToCountry,\n            startupDir,\n            getStartupDirs\n        }}>\n            {props.children}\n        </BootcampAppContext.Provider>\n    )\n};\n\nexport default BootcampFinalProjectContextProvider;","import { API_DEV_URL } from \"../Shared/app-constants\";\nimport axios from \"axios\";\n\nexport const getAllStartups = () => {\n    return axios.get(`${API_DEV_URL}startups`).then(jsonResponse => {\n        return jsonResponse ? jsonResponse.data : false;\n    }).catch(e => {\n        alert(\"Startup directory could not be loaded\")\n    return false\n    });\n};\n\n","// @flow\nimport React, {useContext, useEffect, useState} from \"react\";\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport { BootcampAppContext } from \"../../Shared/app-context\";\n// import * as d3 from \"d3\";\nimport { MAPBOX_API_URL } from \"../../Shared/app-constants\";\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nconst MapStateHandler = () => {\n    const [state, setState] = useState(() => ({\n        lat: 9.1900,\n        lng: -75.0152,\n        zoom: 2\n    }));\n    return { state, setState};\n};\n\nconst BootcampFinalProjectMap = () => {\n    const { state } = MapStateHandler();\n    const { startupDir, world, addStartupInfoToCountry } = useContext(BootcampAppContext);\n    console.log(state);\n    useEffect(() => {\n        console.log(\"LATAM GEOJSON\",world);\n    },[world]);\n\n    useEffect(() => {\n        console.log(\"Startup Dir\", startupDir);\n    },[startupDir]);\n\n    const position = [state.lat, state.lng];\n    return (\n        <Map center={position} zoom={state.zoom} class=\"project-map\">\n            <TileLayer\n                attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n                url={MAPBOX_API_URL}\n            />\n            {\n                startupDir.startups ?\n                <GeoJSON data={world} onEachFeature={addStartupInfoToCountry}/> : \"\"\n            }\n\n        </Map>\n    )\n};\n\nexport default BootcampFinalProjectMap;","import React, {useContext, useEffect, useState} from 'react';\nimport './App.css';\nimport BootcampFinalProjectMap from \"./Components/Map/map\";\nimport {BootcampAppContext} from \"./Shared/app-context\";\n\nfunction App() {\n    const { getStartupDirs } = useContext(BootcampAppContext);\n    const [dataFetched, setDataFetched] = useState(() => false);\n    useEffect(() => {\n        if(!dataFetched) {\n            getStartupDirs();\n            setDataFetched(true);\n        }\n    },[dataFetched, getStartupDirs, setDataFetched])\n  return (\n    <div className=\"App\">\n      <BootcampFinalProjectMap />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport BootcampFinalProjectContextProvider from \"./Shared/app-context\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <BootcampFinalProjectContextProvider>\n         <App />\n      </BootcampFinalProjectContextProvider>\n</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}